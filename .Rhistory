p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
plot(p)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
plot(p)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
plot(p)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
plot(p)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
plot(p)
source("weibull.r")
p <- get.weibull.analysis(AllFails.asFrame, title = "All Failures", line = c("lm"), conf.lvl = .9999999999999)
plot(p)
r <- c(1,2,3,4)
split(r)
unlist(r)
r
r[1]
r[4]
length(r)
r
list(r)
r
x <- 1
x
list(x)
f <- list(c(5,6), c(7, 8))
f
q <- c(8, 9)
f[[2]] <- q
f
f[[1]][1] <- 7
f
unlist(f)
f[[1]][1] <- a
f
f[[1]][1] <- 'a'
f
is.numeric(f)
is.numeric(f) f <- list(c(5,6), c(7, 8))
f <- list(c(5,6), c(7, 8))
is.numeric(f)
c("a", 1, 2, 3\)
f <- c("a", 1, 2, 3)
f
is.numeric(f)
f <- c(56, 1, 2, 3)
is.numeric(f)
source""
source("weibull.r")
GMV4.All <- AllFailures[grep("PQT04", AllFailures$Vehicle.ID), "Test.Life"]
GMV4.All.asFrame <- as.data.frame(GMV4.All)
p <- get.weibull.analysis(GMV4.All.asFrame)
plot(p)
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm")
plot(p)
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
plot(p)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
plot(p)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = 1)
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = c(1, .0001))
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = c(1, .0001))
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = c(1, .0001))
source("weibull.r")
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = c(1, .0001))
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = c(1, .0001))
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = c(1, .0001))
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = c(1, .0001))
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", restr = c(1, .0001))
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm")
plot(p)
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", conf.lvl = .999999)
plot(p)
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", conf.lvl = .999999, restr = 1)
plot(p)
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", conf.lvl = .999999, restr = c(1, .00001))
plot(p)
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", conf.lvl = .999999, restr = c(1, .00001))
plot(p)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", conf.lvl = .999999, restr = c(1, .00001))
plot(p)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", conf.lvl = .999999, restr = c(1, .00001))
plot(p)
source("weibull.r")
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", conf.lvl = .999999, restr = c(1, .00001))
plot(p)
p <- get.weibull.analysis(GMV4.All.asFrame, line = "lm", conf.lvl = .999999, restr = c(1, .0001))
plot(p)
GMV4.OMF <- AllOMF[grep("PQT04", AllOMF$Vehicle.ID), "Test.Life"]
GMV4.OMF.asFrame <- as.data.frame(GMV4.OMF)
GMV4.All.asFrame
GMV4.Surv.inter_failures <- Surv(make.interFailures(GMV4.OMF), replicate(length(GMV4.OMF), 1))
make.interFailures <- function(cumFailures){
# Check to see if sorted.
if(is.unsorted(cumFailures)){
cumFailures <- sort(cumFailures)
}
nObservation <- length(cumFailures)
# Pre-allocates memory
interFailures <- numeric(nObservation)
# Store first failure time
interFailures[1] <- cumFailures[1]
for (i in seq_along(cumFailures)) {
interFailures[i + 1] <- cumFailures[i + 1] - cumFailures[i]
}
# The for loop creates an NA, so just dropping it
# There is a performance tradeoff according to:
# https://stackoverflow.com/questions/12114439/remove-the-last-element-of-a-vector
if(nObservation < 9000){
interFailures <- interFailures[-length(interFailures)]
}
else{
interFailures <- head(interFailures, -1)
}
# replacing in case there is a problem with parameter solving
interFailures <- replace(interFailures, interFailures == 0, .0001)
rm(list = c("nObservation", "cumFailures"))
return(as.numeric(interFailures))
}
GMV4.Surv.inter_failures <- Surv(make.interFailures(GMV4.OMF), replicate(length(GMV4.OMF), 1))
GMV4.Surv.inter_failures
sum(GMV4.Surv.inter_failures)
sum(make.interFailures(GMV4.OMF))
length(GMV4.OMF)
dt <- data.table(AllFailures, key="Vehicle.ID")
i1 <- dt[,which.max(Test.Life), by = Vehicle.ID][[2]]
i2 <- dt[,.N, by = Vehicle.ID][[2]]
TotalVehicleMiles <- dt[i1 + cumsum(i2) - i2,]
TotalVehicleMiles
TotalVehicleMiles$Test.Life[1]
sum(make.interFailures(GMV4.OMF))/length(GMV4.OMF)
sum(make.interFailures(GMV4.OMF))/(length(GMV4.OMF)+1)
GMV4.OMF
GMV4.OMF[length(GMV4.OMF)]
GMV4.FAULT1 <- GMV4.OMF[]
GMV4.FAULT1[length(GMV4.FAULT1)] <- TotalVehicleMiles$Test.Life[1]
GMV4.FAULT1
sum(make.interFailures(GMV4.FAULT1))/length(GMV4.FAULT1)
source("weibull.r")
fb <- c(0, 168, 840, 1344, 1608)
fb
as.data.frame(fb)
fb<-as.data.frame(fb)
lutz <- get.weibull.analysis(fb)
library(xlsx)
library(data.table)
library(Hmisc)
# for using custom step function in ggplot
library(proto)
library(GGally)
library(survminer)
library(survival)
library(grid)
library(ggplot2)
library(ggpubr)
library(magrittr)
library(scales)
library(fitdistrplus)
lutz <- get.weibull.analysis(fb)
source("weibull.R")
source("misc.r")
lutz <- get.weibull.analysis(fb)
fb
GMV4.EFF.asFrame
fb
rm(fb)
fb <- c(168, 840, 1344,1608)
fb
fb <- as.data.frame(fb)
lutz <- as.data.frame(fb)
lutz
wLutz <- get.weibull.analysis(lutz)
plot(wLutz)
wLutz <- get.weibull.analysis(lutz, line = TRUE)
plot(wLutz)
wLutz <- get.weibull.analysis(lutz, line = TRUE)
plot(wLutz)
wLutz <- get.weibull.analysis(lutz, line = TRUE)
plot(wLutz)
wLutz <- get.weibull.analysis(lutz, line = TRUE, conf.lvl = .95)
plot(wLutz)
lutz
install.packages("acepack")# this is for Hmisc, which is for stat_summary() in ggplot
install.packages("survminer")
install.packages("GGally")
library(xlsx)
library(data.table)
library(Hmisc)
# for using custom step function in ggplot
library(proto)
library(GGally)
library(survminer)
library(survival)
library(grid)
library(ggplot2)
library(ggpubr)
library(magrittr)
library(scales)
library(fitdistrplus)
source("weibull.R")
source("misc.r")
dat <- c(16, 34, 53, 75, 93, 120, 120, 120, 120, 120)
dat <- as.data.frame(dat)
dat
d <- get.weibull.analysis(dat)
plot(d)
d <- get.weibull.analysis(dat, line = TRUE)
plot(d)
GMV4.EFF
GMV4.EFF.asFrame
source("weibull.r")
w <- get.weibull.analysis(GMV4.EFF.asFrame)
library(xlsx)
library(data.table)
library(Hmisc)
# for using custom step function in ggplot
library(proto)
library(GGally)
library(survminer)
library(survival)
library(grid)
library(ggplot2)
library(ggpubr)
library(magrittr)
library(scales)
library(fitdistrplus)
w <- get.weibull.analysis(GMV4.EFF.asFrame)
plot(w)
w <- get.weibull.analysis(GMV4.EFF.asFrame, line = TRUE)
plot(w)
setwd("~/IDA/DEAMS")
filePath <- "data\\DEAMS_SERENA.xlsx"
rm(list = ls())
AllData <- read.xlsx(filePath, 1)
library(xlsx)
AllData <- read.xlsx(filePath, 1)
filePath <- "data\\DEAMS_SERENA.xlsx"
AllData <- read.xlsx(filePath, 1)
head(AllData)
View(AllData)
AllData <- read.xlsx(filePath, 5)
AllData <- read.xlsx(filePath, 1, startRow = 5, colIndex = c(1, 4, 6, 7, 9))
colnames(AllData)
head(AllData)
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 6, 7, 9))
library(xlsx)
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 6, 7, 9))
View(AllData)
typeof(AllData$Submit.Date)
AllData
AllData$Submit.Date[1]
typeof(AllData$Submit.Date[1])
gsub
head(gsub('DEAMS - ', '', AllData$Type))
head(gsub('Severity ', '', AllData$Severity))
as.Date(AllData$Severity[1])
class(AllData$Submit.Date[1])
head(AllData[order(AllData$Submit.Date), ])
AllData$Type <- gsub('DEAMS - ', '', AllData$Type)
AllData$Severity <- gsub('Severity ', '', AllData$Severity)
AllData <- AllData[order(AllData$Submit.Date), ]
View(AllData)
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 5, 6, 7, 9))
AllData$Type <- gsub('DEAMS - ', '', AllData$Type)
AllData$Severity <- gsub('Severity ', '', AllData$Severity)
AllData <- AllData[order(AllData$Submit.Date), ]
View(AllData)
substr(AllData$Description[1], regexpr('Base:', AllData$Description[1]), regexpr(' Issue', AllData$Description[1]))
regexpr('Base:', AllData$Description[1])
s <- "This is a Base: text string"
regexpr('Base: ', s)
substr(s, 11, 17)
regexpr('Base: ', s)[1]
regexpr('Base: ', s)[1] + 5
regexpr('Base: ', s)[1] + 6
s <- "This is a Base: text string Issue: "
regexpr('Issue:', s)[1]
substr(s, regexpr('Base: ', s)[1] + 6, regexpr('Issue:', s)[1])
substr(s, regexpr('Base: ', s)[1] + 6, regexpr('Issue:', s)[1] - 1)
substr(AllData$Description[1], regexpr('Base: ', s)[1] + 6, regexpr('Issue:', s)[1] - 1)
substr(AllData$Description[1], regexpr('Base: ', AllData$Description[1])[1] + 6, regexpr('Issue:', AllData$Description[1])[1] - 1)
AllData$Description[1]
AllData$Description[2]
AllData$Description[100]
AllData$Description[200]
substr(AllData$Description[200], regexpr('Base: ', AllData$Description[200])[1] + 6, regexpr('Issue:', AllData$Description[200])[1] - 1)
length(which(AllData$Description == "Base:"))
length(grep("Base:", AllData$Description))
length(grep("base:", AllData$Description))
length(grep("Base", AllData$Description))
length(grep(" Base: ", AllData$Description))
length(grep("Base: ", AllData$Description))
length(grep("Base:", AllData$Description))
length(grep("Issue:", AllData$Description))
length(grep("issue:", AllData$Description))
length(grep("\b(Base:|base:)(?:\W+\w+){1,6}?\W+(Issue:|issue:)\b", AllData$Description))
length(grep("Base:", AllData$Description))
length(grep("base:", AllData$Description))
length(grep("(B|b)ase:", AllData$Description))
length(grep("(B|b)ase", AllData$Description))
length(grep("Base", AllData$Description))
length(grep("Base ", AllData$Description))
length(grep("(B|c)ase", AllData$Description))
length(grep("(B|c)ase:", AllData$Description))
length(grep("\bBase:\W+(?:\w+\W+){1,200}?Issue:\b", AllData$Description))
length(grep("\\bBase:\\W+(?:\\w+\\W+){1,200}?Issue:\\b", AllData$Description))
grep("\\bBase:\\W+(?:\\w+\\W+){1,200}?Issue:\\b", AllData$Description)
length(grep("(I|i)ssue:", AllData$Description))
substr(s, regexpr('Base: ', s)[1] + 6, regexpr('Issue:', s)[1] - 1)
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=Issue:)", AllData$Description[200], perl = TRUE))
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE))
gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE)
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=fssue:)", AllData$Description[200], perl = TRUE))
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I)ssue:)", AllData$Description[200], perl = TRUE))
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(i)ssue:)", AllData$Description[200], perl = TRUE))
gregexpr("(?<=Base:).*(?=(i)ssue:)", AllData$Description[200], perl = TRUE)
gregexpr("(?<=Base:).*(?=(I)ssue:)", AllData$Description[200], perl = TRUE)
unlist(gregexpr("(?<=Base:).*(?=(I)ssue:)", AllData$Description[200], perl = TRUE))
gregexpr("(?<=Base:).*(?=(I)ssue:)", AllData$Description[200], perl = TRUE)[[1]]
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE))
x <- regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE))
x
x[1]
x[[1]]
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE))[[1]]
unlist(regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE)))
unlist(regmatches(AllData$Description[2], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[2], perl = TRUE)))
typeof(unlist(regmatches(AllData$Description[2], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[2], perl = TRUE))))
typeof(unlist(regmatches(AllData$Description[450], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[450], perl = TRUE))))
unlist(regmatches(AllData$Description[450], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[450], perl = TRUE)))
head(sapply(AllData$Description, unlist(regmatches(AllData$Description[450], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[450], perl = TRUE)))))
head(sapply(AllData$Description, unlist(regmatches(AllData$Description, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description, perl = TRUE)))))
head(sapply(AllData$Description, regmatches(AllData$Description, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description, perl = TRUE))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
length(unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE)))))
length(unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*", x, perl = TRUE)))))
length(unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue)", x, perl = TRUE)))))
head(unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*", x, perl = TRUE)))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*", x, perl = TRUE))))
length(unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=((I|i)ssue)|(ISSUE)|(:))", x, perl = TRUE)))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=((I|i)ssue)|(ISSUE)|(:))", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
head(sapply(AllData$Description, unlist(regmatches(AllData$Description[450], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[450], perl = TRUE)))))
head(sapply(AllData$Description, unlist(regmatches(AllData$Description, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description, perl = TRUE)))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(((I|i)ssue))|(ISSUE)|(:))", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(:)|(ISSUE)", x, perl = TRUE))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(((I|i)ssue))|(ISSUE)|(:))", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(((I|i)ssue))|(ISSUE)|(:))", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)", x, perl = TRUE))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)|(?=Title:)|(?=*)", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)|(?=Title:)|(?=\*)", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)|(?=Title:)|(?=\\*)", x, perl = TRUE))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)|(?=Title:)|(?=\\*)", x, perl = TRUE))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)|(?=Title:)|(?=\\*)", x, perl = TRUE))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr(".*Base:(.*)((I|i)ssue:|:|ISSUE|Title:).*", x, perl = TRUE))))
sapply(AllData$Description, function(x) regmatches(x, gregexpr(".*Base:(.*)((I|i)ssue:|:|ISSUE|Title:).*", x, perl = TRUE)))
sapply(AllData$Description, function(x) gsub(".*Base:(.*)((I|i)ssue:|:|ISSUE|Title:).*", "\\1", x))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))), 10)
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))), 100)
regmatches(AllData$Description[450], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[450], perl = TRUE))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=  )", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\s{2}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr(".*Base:(.*)((I|i)ssue:|:|ISSUE|Title:).*", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(/\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2,3})|((I|i)ssue:))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(I|i)ssue:)|((\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=([[:space:]]{2,3})|((I|i)ssue:))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(I|i)ssue:)|((\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|((\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=([[:space:]]{2,3})", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=[[:space:]]{2,3})", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(:))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2,3})|(:)", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2,3})|(:))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*", x, perl = TRUE)))
View(AllData)
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=\w).*?(?=(\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", x, perl = TRUE)))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", x, perl = TRUE))))
length(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE))
length(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)))
regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE))
unlist(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)))
AllData$Location <- sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)))
AllData$Location <- sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1)
length(AllData$Location)
typeof(AllData$Location)
AllData$Location
length(sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
length(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1)
length(unlist(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
length(unlist(regmatches(AllData$Description, gregexpr("(?<=Base:\\s).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
length(unlist(regmatches(AllData$Description, gregexpr("(?<=Base:.).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
AllData$Location <- sapply(regmatches(AllData$Description, gregexpr("(?<=Base:.).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1)
AllData$Location
AllData$Location <- sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1)
AllData$Location
AllData$Location <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
AllData$Location
unique(AllData$Description)
length(unique(AllData$Location))
library(xlsx)
# Getting the data
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 5, 6, 7, 9))
AllData$Type <- gsub('DEAMS - ', '', AllData$Type)
AllData$Severity <- gsub('Severity ', '', AllData$Severity)
AllData <- AllData[order(AllData$Submit.Date), ]
# Regex to get the locations and customer
AllData$Location <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
AllData$Customer <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=((C|c)ustomer:)).*?(?=\w).*?(?=(\s{2,3})|((E|e)mail:))", AllData$Description, perl = TRUE)), '[',1))
library(xlsx)
# Getting the data
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 5, 6, 7, 9))
AllData$Type <- gsub('DEAMS - ', '', AllData$Type)
AllData$Severity <- gsub('Severity ', '', AllData$Severity)
AllData <- AllData[order(AllData$Submit.Date), ]
# Regex to get the locations and customer
AllData$Location <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
AllData$Customer <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=((C|c)ustomer:)).*?(?=\\w).*?(?=(\\s{2,3})|((E|e)mail:))", AllData$Description, perl = TRUE)), '[',1))
unique(AllData$Customer)
length(AllData$Customer)
length(AllData$Location)
length(unique(AllData$Location))
anyNA(AllData$Customer)
drops <- "Description"
head(AllData[,!(names(DF) %in% drops)])
head(AllData[,!(names(AllData) %in% drops)])
# Getting the data
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 5, 6, 7, 9))
AllData$Type <- gsub('DEAMS - ', '', AllData$Type)
AllData$Severity <- gsub('Severity ', '', AllData$Severity)
AllData <- AllData[order(AllData$Submit.Date), ]
# Regex to get the locations and customer (after this should drop description)
AllData$Location <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
AllData$Customer <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=((C|c)ustomer:)).*?(?=\\w).*?(?=(\\s{2,3})|((E|e)mail:))", AllData$Description, perl = TRUE)), '[',1))
#drop all the description data after getting what we want
drops <- "Description"
AllData <- AllData[,!(names(AllData) %in% drops)]
names(AllData)
