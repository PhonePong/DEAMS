lutz <- as.data.frame(fb)
lutz
wLutz <- get.weibull.analysis(lutz)
plot(wLutz)
wLutz <- get.weibull.analysis(lutz, line = TRUE)
plot(wLutz)
wLutz <- get.weibull.analysis(lutz, line = TRUE)
plot(wLutz)
wLutz <- get.weibull.analysis(lutz, line = TRUE)
plot(wLutz)
wLutz <- get.weibull.analysis(lutz, line = TRUE, conf.lvl = .95)
plot(wLutz)
lutz
install.packages("acepack")# this is for Hmisc, which is for stat_summary() in ggplot
install.packages("survminer")
install.packages("GGally")
library(xlsx)
library(data.table)
library(Hmisc)
# for using custom step function in ggplot
library(proto)
library(GGally)
library(survminer)
library(survival)
library(grid)
library(ggplot2)
library(ggpubr)
library(magrittr)
library(scales)
library(fitdistrplus)
source("weibull.R")
source("misc.r")
dat <- c(16, 34, 53, 75, 93, 120, 120, 120, 120, 120)
dat <- as.data.frame(dat)
dat
d <- get.weibull.analysis(dat)
plot(d)
d <- get.weibull.analysis(dat, line = TRUE)
plot(d)
GMV4.EFF
GMV4.EFF.asFrame
source("weibull.r")
w <- get.weibull.analysis(GMV4.EFF.asFrame)
library(xlsx)
library(data.table)
library(Hmisc)
# for using custom step function in ggplot
library(proto)
library(GGally)
library(survminer)
library(survival)
library(grid)
library(ggplot2)
library(ggpubr)
library(magrittr)
library(scales)
library(fitdistrplus)
w <- get.weibull.analysis(GMV4.EFF.asFrame)
plot(w)
w <- get.weibull.analysis(GMV4.EFF.asFrame, line = TRUE)
plot(w)
setwd("~/IDA/DEAMS")
filePath <- "data\\DEAMS_SERENA.xlsx"
rm(list = ls())
AllData <- read.xlsx(filePath, 1)
library(xlsx)
AllData <- read.xlsx(filePath, 1)
filePath <- "data\\DEAMS_SERENA.xlsx"
AllData <- read.xlsx(filePath, 1)
head(AllData)
View(AllData)
AllData <- read.xlsx(filePath, 5)
AllData <- read.xlsx(filePath, 1, startRow = 5, colIndex = c(1, 4, 6, 7, 9))
colnames(AllData)
head(AllData)
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 6, 7, 9))
library(xlsx)
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 6, 7, 9))
View(AllData)
typeof(AllData$Submit.Date)
AllData
AllData$Submit.Date[1]
typeof(AllData$Submit.Date[1])
gsub
head(gsub('DEAMS - ', '', AllData$Type))
head(gsub('Severity ', '', AllData$Severity))
as.Date(AllData$Severity[1])
class(AllData$Submit.Date[1])
head(AllData[order(AllData$Submit.Date), ])
AllData$Type <- gsub('DEAMS - ', '', AllData$Type)
AllData$Severity <- gsub('Severity ', '', AllData$Severity)
AllData <- AllData[order(AllData$Submit.Date), ]
View(AllData)
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 5, 6, 7, 9))
AllData$Type <- gsub('DEAMS - ', '', AllData$Type)
AllData$Severity <- gsub('Severity ', '', AllData$Severity)
AllData <- AllData[order(AllData$Submit.Date), ]
View(AllData)
substr(AllData$Description[1], regexpr('Base:', AllData$Description[1]), regexpr(' Issue', AllData$Description[1]))
regexpr('Base:', AllData$Description[1])
s <- "This is a Base: text string"
regexpr('Base: ', s)
substr(s, 11, 17)
regexpr('Base: ', s)[1]
regexpr('Base: ', s)[1] + 5
regexpr('Base: ', s)[1] + 6
s <- "This is a Base: text string Issue: "
regexpr('Issue:', s)[1]
substr(s, regexpr('Base: ', s)[1] + 6, regexpr('Issue:', s)[1])
substr(s, regexpr('Base: ', s)[1] + 6, regexpr('Issue:', s)[1] - 1)
substr(AllData$Description[1], regexpr('Base: ', s)[1] + 6, regexpr('Issue:', s)[1] - 1)
substr(AllData$Description[1], regexpr('Base: ', AllData$Description[1])[1] + 6, regexpr('Issue:', AllData$Description[1])[1] - 1)
AllData$Description[1]
AllData$Description[2]
AllData$Description[100]
AllData$Description[200]
substr(AllData$Description[200], regexpr('Base: ', AllData$Description[200])[1] + 6, regexpr('Issue:', AllData$Description[200])[1] - 1)
length(which(AllData$Description == "Base:"))
length(grep("Base:", AllData$Description))
length(grep("base:", AllData$Description))
length(grep("Base", AllData$Description))
length(grep(" Base: ", AllData$Description))
length(grep("Base: ", AllData$Description))
length(grep("Base:", AllData$Description))
length(grep("Issue:", AllData$Description))
length(grep("issue:", AllData$Description))
length(grep("\b(Base:|base:)(?:\W+\w+){1,6}?\W+(Issue:|issue:)\b", AllData$Description))
length(grep("Base:", AllData$Description))
length(grep("base:", AllData$Description))
length(grep("(B|b)ase:", AllData$Description))
length(grep("(B|b)ase", AllData$Description))
length(grep("Base", AllData$Description))
length(grep("Base ", AllData$Description))
length(grep("(B|c)ase", AllData$Description))
length(grep("(B|c)ase:", AllData$Description))
length(grep("\bBase:\W+(?:\w+\W+){1,200}?Issue:\b", AllData$Description))
length(grep("\\bBase:\\W+(?:\\w+\\W+){1,200}?Issue:\\b", AllData$Description))
grep("\\bBase:\\W+(?:\\w+\\W+){1,200}?Issue:\\b", AllData$Description)
length(grep("(I|i)ssue:", AllData$Description))
substr(s, regexpr('Base: ', s)[1] + 6, regexpr('Issue:', s)[1] - 1)
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=Issue:)", AllData$Description[200], perl = TRUE))
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE))
gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE)
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=fssue:)", AllData$Description[200], perl = TRUE))
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I)ssue:)", AllData$Description[200], perl = TRUE))
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(i)ssue:)", AllData$Description[200], perl = TRUE))
gregexpr("(?<=Base:).*(?=(i)ssue:)", AllData$Description[200], perl = TRUE)
gregexpr("(?<=Base:).*(?=(I)ssue:)", AllData$Description[200], perl = TRUE)
unlist(gregexpr("(?<=Base:).*(?=(I)ssue:)", AllData$Description[200], perl = TRUE))
gregexpr("(?<=Base:).*(?=(I)ssue:)", AllData$Description[200], perl = TRUE)[[1]]
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE))
x <- regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE))
x
x[1]
x[[1]]
regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE))[[1]]
unlist(regmatches(AllData$Description[200], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[200], perl = TRUE)))
unlist(regmatches(AllData$Description[2], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[2], perl = TRUE)))
typeof(unlist(regmatches(AllData$Description[2], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[2], perl = TRUE))))
typeof(unlist(regmatches(AllData$Description[450], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[450], perl = TRUE))))
unlist(regmatches(AllData$Description[450], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[450], perl = TRUE)))
head(sapply(AllData$Description, unlist(regmatches(AllData$Description[450], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[450], perl = TRUE)))))
head(sapply(AllData$Description, unlist(regmatches(AllData$Description, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description, perl = TRUE)))))
head(sapply(AllData$Description, regmatches(AllData$Description, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description, perl = TRUE))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
length(unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE)))))
length(unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*", x, perl = TRUE)))))
length(unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue)", x, perl = TRUE)))))
head(unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*", x, perl = TRUE)))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*", x, perl = TRUE))))
length(unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=((I|i)ssue)|(ISSUE)|(:))", x, perl = TRUE)))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=((I|i)ssue)|(ISSUE)|(:))", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
head(sapply(AllData$Description, unlist(regmatches(AllData$Description[450], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[450], perl = TRUE)))))
head(sapply(AllData$Description, unlist(regmatches(AllData$Description, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description, perl = TRUE)))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(((I|i)ssue))|(ISSUE)|(:))", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(:)|(ISSUE)", x, perl = TRUE))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(((I|i)ssue))|(ISSUE)|(:))", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(((I|i)ssue))|(ISSUE)|(:))", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)", x, perl = TRUE))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)|(?=Title:)|(?=*)", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)|(?=Title:)|(?=\*)", x, perl = TRUE))))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)|(?=Title:)|(?=\\*)", x, perl = TRUE))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)|(?=Title:)|(?=\\*)", x, perl = TRUE))))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|(?=:)|(?=ISSUE)|(?=Title:)|(?=\\*)", x, perl = TRUE))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr(".*Base:(.*)((I|i)ssue:|:|ISSUE|Title:).*", x, perl = TRUE))))
sapply(AllData$Description, function(x) regmatches(x, gregexpr(".*Base:(.*)((I|i)ssue:|:|ISSUE|Title:).*", x, perl = TRUE)))
sapply(AllData$Description, function(x) gsub(".*Base:(.*)((I|i)ssue:|:|ISSUE|Title:).*", "\\1", x))
length(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))))
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))), 10)
head(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE))), 100)
regmatches(AllData$Description[450], gregexpr("(?<=Base:).*(?=(I|i)ssue:)", AllData$Description[450], perl = TRUE))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=  )", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\s{2}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr(".*Base:(.*)((I|i)ssue:|:|ISSUE|Title:).*", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(/\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2,3})|((I|i)ssue:))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(I|i)ssue:)|((\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=([[:space:]]{2,3})|((I|i)ssue:))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(I|i)ssue:)|((\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*(?=(I|i)ssue:)|((\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=([[:space:]]{2,3})", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=[[:space:]]{2,3})", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(:))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2,3})|(:)", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=(\\s{2,3})|(:))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*", x, perl = TRUE)))
View(AllData)
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=\w).*?(?=(\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3}))", x, perl = TRUE)))
sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", x, perl = TRUE)))
unlist(sapply(AllData$Description, function(x) regmatches(x, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", x, perl = TRUE))))
length(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE))
length(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)))
regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE))
unlist(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)))
AllData$Location <- sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)))
AllData$Location <- sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1)
length(AllData$Location)
typeof(AllData$Location)
AllData$Location
length(sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
length(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1)
length(unlist(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
length(unlist(regmatches(AllData$Description, gregexpr("(?<=Base:\\s).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
length(unlist(regmatches(AllData$Description, gregexpr("(?<=Base:.).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
AllData$Location <- sapply(regmatches(AllData$Description, gregexpr("(?<=Base:.).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1)
AllData$Location
AllData$Location <- sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1)
AllData$Location
AllData$Location <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
AllData$Location
unique(AllData$Description)
length(unique(AllData$Location))
library(xlsx)
# Getting the data
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 5, 6, 7, 9))
AllData$Type <- gsub('DEAMS - ', '', AllData$Type)
AllData$Severity <- gsub('Severity ', '', AllData$Severity)
AllData <- AllData[order(AllData$Submit.Date), ]
# Regex to get the locations and customer
AllData$Location <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
AllData$Customer <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=((C|c)ustomer:)).*?(?=\w).*?(?=(\s{2,3})|((E|e)mail:))", AllData$Description, perl = TRUE)), '[',1))
library(xlsx)
# Getting the data
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 5, 6, 7, 9))
AllData$Type <- gsub('DEAMS - ', '', AllData$Type)
AllData$Severity <- gsub('Severity ', '', AllData$Severity)
AllData <- AllData[order(AllData$Submit.Date), ]
# Regex to get the locations and customer
AllData$Location <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
AllData$Customer <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=((C|c)ustomer:)).*?(?=\\w).*?(?=(\\s{2,3})|((E|e)mail:))", AllData$Description, perl = TRUE)), '[',1))
unique(AllData$Customer)
length(AllData$Customer)
length(AllData$Location)
length(unique(AllData$Location))
anyNA(AllData$Customer)
drops <- "Description"
head(AllData[,!(names(DF) %in% drops)])
head(AllData[,!(names(AllData) %in% drops)])
# Getting the data
AllData <- read.xlsx(filePath, 1, startRow = 6, colIndex = c(1, 4, 5, 6, 7, 9))
AllData$Type <- gsub('DEAMS - ', '', AllData$Type)
AllData$Severity <- gsub('Severity ', '', AllData$Severity)
AllData <- AllData[order(AllData$Submit.Date), ]
# Regex to get the locations and customer (after this should drop description)
AllData$Location <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=Base:).*?(?=\\w).*?(?=(\\s{2,3})|((I|i)ssue:))", AllData$Description, perl = TRUE)), '[',1))
AllData$Customer <- trimws(sapply(regmatches(AllData$Description, gregexpr("(?<=((C|c)ustomer:)).*?(?=\\w).*?(?=(\\s{2,3})|((E|e)mail:))", AllData$Description, perl = TRUE)), '[',1))
#drop all the description data after getting what we want
drops <- "Description"
AllData <- AllData[,!(names(AllData) %in% drops)]
names(AllData)
help("diff.POSIXt")
help("diff.time")
help("diff.difftime")
difftime(AllData$Submit.Date[1], AllData$Submit.Date[1])
difftime(AllData$Submit.Date[1], AllData$Submit.Date[2])
is.unsorted(AllData$Submit.Date)
difftime(AllData$Submit.Date[2], AllData$Submit.Date[1])
typeof(difftime(AllData$Submit.Date[2], AllData$Submit.Date[1]))
difftime(AllData$Submit.Date[2], AllData$Submit.Date[1], units = "hours")
difftime(AllData$Submit.Date[2], AllData$Submit.Date[1], units = c("hours", "seconds"))
difftime(AllData$Submit.Date[2], AllData$Submit.Date[1], units = "seconds")
difftime(AllData$Submit.Date[2], AllData$Submit.Date[1], units = "secs")
difftime(AllData$Submit.Date[2], AllData$Submit.Date[1], units = "secs")/(24*60)
difftime(AllData$Submit.Date[2], AllData$Submit.Date[1], units = "secs")/(60)
12448391*60
difftime(AllData$Submit.Date[2], AllData$Submit.Date[2], units = "hours")
difftime(AllData$Submit.Date[3], AllData$Submit.Date[1], units = "hours")
difftime(AllData$Submit.Date[2], AllData$Submit.Date[1], units = "hours")
difftime(AllData$Submit.Date[1], AllData$Submit.Date[1], units = "hours")
difftime(AllData$Submit.Date[67], AllData$Submit.Date[1], units = "hours")
AllData$Time.to.Failure <- sapply(AllData$Submit.Date, difftime(AllData$Submit.Date, AllData$Submit.Date[1], units = "hours"), '[', 1)
head(difftime(AllData$Submit.Date, AllData$Submit.Date[1], units = "hours"))
AllData$Time.to.Fail <- difftime(AllData$Submit.Date, AllData$Submit.Date[1], units = "hours")
AllData$Time.to.Fail
head(difftime(AllData$Submit.Date, AllData$Submit.Date[-1], units = "hours"))
make.interFailures <- function(cumFailures){
# Check to see if sorted.
if(is.unsorted(cumFailures)){
cumFailures <- sort(cumFailures)
}
nObservation <- length(cumFailures)
# Pre-allocates memory
interFailures <- numeric(nObservation)
# Store first failure time
interFailures[1] <- cumFailures[1]
for (i in seq_along(cumFailures)) {
interFailures[i + 1] <- cumFailures[i + 1] - cumFailures[i]
}
# The for loop creates an NA, so just dropping it
# There is a performance tradeoff according to:
# https://stackoverflow.com/questions/12114439/remove-the-last-element-of-a-vector
if(nObservation < 9000){
interFailures <- interFailures[-length(interFailures)]
}
else{
interFailures <- head(interFailures, -1)
}
# replacing in case there is a problem with parameter solving
interFailures <- replace(interFailures, interFailures == 0, .0001)
rm(list = c("nObservation", "cumFailures"))
return(as.numeric(interFailures))
}
head(make.interFailures(AllData$Time.to.Fail))
head(AllData$Time.to.Fail)
AllData$Time.to.Fail[1]-AllData$Time.to.Fail[1]
AllData$Time.to.Fail[2]-AllData$Time.to.Fail[1]
AllData$Time.to.Fail[3]-AllData$Time.to.Fail[2]
make.interFailures <- function(cumFailures){
# Check to see if sorted.
if(is.unsorted(cumFailures)){
cumFailures <- sort(cumFailures)
}
nObservation <- length(cumFailures)
# Pre-allocates memory
interFailures <- numeric(nObservation)
# Store first failure time
interFailures[1] <- cumFailures[1]
for (i in seq_along(cumFailures)) {
interFailures[i + 1] <- cumFailures[i + 1] - cumFailures[i]
}
# The for loop creates an NA, so just dropping it
# There is a performance tradeoff according to:
# https://stackoverflow.com/questions/12114439/remove-the-last-element-of-a-vector
if(nObservation < 9000){
interFailures <- interFailures[-length(interFailures)]
}
else{
interFailures <- head(interFailures, -1)
}
# replacing in case there is a problem with parameter solving
#interFailures <- replace(interFailures, interFailures == 0, .0001)
rm(list = c("nObservation", "cumFailures"))
return(as.numeric(interFailures))
}
head(make.interFailures(AllData$Time.to.Fail))
length(make.interFailures(AllData$Time.to.Fail))
AllData$Time.Between.Failure <- make.interFailures(AllData$Time.to.Fail)
apply(AllData$Time.Between.Failure == 0, 1, sum)
rowsum(AllData$Time.Between.Failure == 0)
typeof(AllData$Time.Between.Failure)
rowSums(AllData$Time.Between.Failure == 0)
colSums(AllData$Time.Between.Failure == 0)
colSums(AllData == 0)
colSums(AllData != 0)
AllData$Time.Between.Failure[1076]
table(AllData$Time.Between.Failure)
t <- table(AllData$Time.Between.Failure)
t[names(t)==0]
t[names(t)==0, 2]
t[2, names(t)==0]
t[names(t)==0,1]
t[1,names(t)==0,1]
t[1, names(t)==0]
t[2,names(t)==0]
length(t[names(t)==0])
unlist(t[names(t)==0])
t[names(t)==0]
as.data.frame(t(numbers))
as.data.frame(t)
t[names(t)==0]
as.data.frame(t[names(t)==0])
as.data.frame(t[names(t)==0, 2])
typeof(t)
typeof(t[names(t)==0, 2])
typeof(t[names(t)==0])
length(t[names(t)==0])
t <- table(AllData$Time.Between.Failure)
head(t)
rm(list = "t")
make.interFailures <- function(cumFailures){
# Check to see if sorted.
if(is.unsorted(cumFailures)){
cumFailures <- sort(cumFailures)
}
nObservation <- length(cumFailures)
# Pre-allocates memory
interFailures <- numeric(nObservation)
# Store first failure time
interFailures[1] <- cumFailures[1]
for (i in seq_along(cumFailures)) {
interFailures[i + 1] <- cumFailures[i + 1] - cumFailures[i]
}
# The for loop creates an NA, so just dropping it
# There is a performance tradeoff according to:
# https://stackoverflow.com/questions/12114439/remove-the-last-element-of-a-vector
if(nObservation < 9000){
interFailures <- interFailures[-length(interFailures)]
}
else{
interFailures <- head(interFailures, -1)
}
t <- table(interFailures)
if( t[names(t) == 0] > 1){
# replacing in case there is a problem with parameter solving
interFailures <- replace(interFailures, interFailures == 0, .0001)
}
rm(list = c("nObservation", "cumFailures", "t"))
return(as.numeric(interFailures))
}
#Make Times Between Failure column
AllData$Time.Between.Failure <- make.interFailures(AllData$Time.to.Fail)
head(AllData$Time.Between.Failure)
colSums(AllData$Time.Between.Failure)
colSums(AllData)
colSums(AllData$Time.Between.Failure)
rowSums(AllData$Time.Between.Failure)
colSums(AllData == 0)
colSums(AllData != 0)
library("survival")
Surv(AllData$Time.to.Fail)
AllData.Surv <- Surv(AllData$Time.to.Fail)
AllData.km <- survfit(AllData.Surv ~ 1, conf.int = .95, conf.type = "plain")
AllData.weib <- survreg(AllData.Surv ~ 1, dist = "weibull")
AllData.weib <- survreg(AllData.Surv, dist = "weibull")
ggsurvplot(AllData.km, title = "ALL DEAMS", ggtheme = theme_gray(base_size = 15), conf.int = TRUE, color = "black", conf.int.fill = "black") + labs(x = "HOURS", y = "RELIABILITY")+coord_cartesian(expand = FALSE)
library(ggsurv)
library("ggsurv")
library(survival)
ggsurvplot(AllData.km, title = "ALL DEAMS", ggtheme = theme_gray(base_size = 15), conf.int = TRUE, color = "black", conf.int.fill = "black") + labs(x = "HOURS", y = "RELIABILITY")+coord_cartesian(expand = FALSE)
library(ggplot2)
ggsurvplot(AllData.km, title = "ALL DEAMS", ggtheme = theme_gray(base_size = 15), conf.int = TRUE, color = "black", conf.int.fill = "black") + labs(x = "HOURS", y = "RELIABILITY")+coord_cartesian(expand = FALSE)
library(survminer)
ggsurvplot(AllData.km, title = "ALL DEAMS", ggtheme = theme_gray(base_size = 15), conf.int = TRUE, color = "black", conf.int.fill = "black") + labs(x = "HOURS", y = "RELIABILITY")+coord_cartesian(expand = FALSE)
make.interval.Surv <- function(failureData){
if(is.unsorted(failureData)){
failureData <- sort(failureData)
}
t <- data.frame(table(failureData))
t <- setDF(t)
count <- 1
status <- numeric(0)
for(i in t$Freq){
if(i == 1){
status[count] <- i
count = count + 1
}
else{
status <- c(status, c(1, replicate(i - 1, 0)))
count = count + 1 + (i - 1)
}
rm(list = c("t", "count"))
return(Surv(failureData, status))
}
AllData.Surv <- make.interval.Surv(AllData$Time.to.Fail)
library(data.table)
AllData.Surv <- make.interval.Surv(AllData$Time.to.Fail)
AllData.Surv
tail(AllData.Surv)
AllData.Surv[1070]
AllData.Surv[1076]
AllData.km <- survfit(AllData.Surv, conf.int = .95, conf.type = "plain")
AllData.km <- survfit(AllData.Surv ~ 1, conf.int = .95, conf.type = "plain")
ggsurvplot(AllData.km, title = "ALL DEAMS", ggtheme = theme_gray(base_size = 15), conf.int = TRUE, color = "black", conf.int.fill = "black") + labs(x = "HOURS", y = "RELIABILITY")+coord_cartesian(expand = FALSE)
Time.to.Fail.Surv <- Surv(AllData$Time.to.Fail)
Time.to.Fail.km <- survfit(Time.to.Fail.Surv, conf.int = .95, conf.type = "plain")
ggsurvplot(Time.to.Fail.km, title = "Time to Failure", ggtheme = theme_gray(base_size = 15), conf.int = TRUE, color = "black", conf.int.fill = "black") + labs(x = "HOURS", y = "RELIABILITY")+coord_cartesian(expand = FALSE)
Time.to.Fail.Surv <- Surv(AllData$Time.to.Fail)
Time.to.Fail.km <- survfit(Time.to.Fail.Surv ~ 1, conf.int = .95, conf.type = "plain")
ggsurvplot(Time.to.Fail.km, title = "Time to Failure", ggtheme = theme_gray(base_size = 15), conf.int = TRUE, color = "black", conf.int.fill = "black") + labs(x = "HOURS", y = "RELIABILITY")+coord_cartesian(expand = FALSE)
Time.Between.Fails.Surv <- Surv(AllData$Time.to.Fail)
Time.Between.Fails.km <- survfit(Time.Between.Fails.Surv ~ 1, conf.int = .95, conf.type = "plain")
ggsurvplot(Time.Between.Fails.km, title = "ALL DEAMS", ggtheme = theme_gray(base_size = 15), conf.int = TRUE, color = "black", conf.int.fill = "black") + labs(x = "HOURS", y = "RELIABILITY")+coord_cartesian(expand = FALSE)
Time.Between.Fails.Surv <- Surv(AllData$Time.Between.Failure)
Time.Between.Fails.km <- survfit(Time.Between.Fails.Surv ~ 1, conf.int = .95, conf.type = "plain")
ggsurvplot(Time.Between.Fails.km, title = "Times Between Failures", ggtheme = theme_gray(base_size = 15), conf.int = TRUE, color = "black", conf.int.fill = "black") + labs(x = "HOURS", y = "RELIABILITY")+coord_cartesian(expand = FALSE)
AllData$Time.to.Fail
write(AllData$Time.to.Fail, "", sep = "\t")
write(AllData$Time.to.Fail, "", sep = " ")
write(as.data.frame(AllData$Time.to.Fail), "", sep = " ")
write(AllData$Time.to.Fail, "", sep = "\n")
write(AllData$Time.to.Fail, "new file", sep = "\n")
write(AllData$Time.to.Fail, "data/Failure_Times", sep = "\n")
write(AllData$Time.to.Fail, "data/Failure_Times.txt", sep = "\n")
write(AllData$Time.Between.Failure, "data/Time_Between_Failure.txt", sep = "\n")
